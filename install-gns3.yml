######################################################################
# This playbook will install the GNS3 server and GUI on a rhel9 system.
# Mark Dotson, April 2025
# Run as root
#
######################################################################


---
- name: GNS3 Installation Playbook for RHEL 9
  hosts: localhost
  become: yes
  vars:
    gns3_src_dir: /usr/local/src/gns3
    current_user: "{{ lookup('env', 'USER') }}"

  tasks:
    - name: Update system packages
      dnf:
        name: "*"
        state: latest
        update_cache: yes

    - name: Create gns3 group
      group:
        name: gns3
        state: present

    - name: Create gns3 user
      user:
        name: gns3
        createhome: true
        system: true

    - name: Install Python packages for gns3 user # This installs the requirements to enable gns3 user to run the service
      pip:
        name:
          - gns3-server
          - gns3-gui
        executable: pip3
        extra_args: --user
      become_user: gns3

    - name: Check if GUI is installed
      shell: systemctl get-default
      register: default_target
      changed_when: false

    - name: Install GUI if not present
      block:
        - name: Install Server with GUI package group
          dnf:
            name: "@Server with GUI"
            state: present

        - name: Set default target to graphical
          command: systemctl set-default graphical.target

        - name: Start GUI
          command: systemctl isolate graphical
      when: default_target.stdout != "graphical.target"

    - name: Install required tools
      dnf:
        name:
          - dnf-plugins-core
          - git
          - wget
          - curl
          - openssl
          - python3-devel
          - elfutils-libelf-devel
          - libpcap-devel
          - python3-pyqt5-sip
          - python3-qt5
          - xterm
          - cmake
          - busybox
          - libnsl
          - telnet
        state: present

    - name: Check if EPEL repo is installed
      stat:
        path: /etc/yum.repos.d/epel.repo
      register: epel_repo

    - name: Install EPEL repository
      dnf:
        name: https://dl.fedoraproject.org/pub/epel/epel-release-latest-9.noarch.rpm
        state: present
      when: not epel_repo.stat.exists

    - name: Install Development Tools group
      dnf:
        name: "@Development Tools"
        state: present

    - name: Create GNS3 source directory
      file:
        path: "{{ gns3_src_dir }}"
        state: directory
        mode: '0755'

    - name: Clone GNS3 server repository
      git:
        repo: "https://github.com/GNS3/gns3-server.git"
        dest: "{{ gns3_src_dir }}/gns3-server"
      register: gns3_server_clone

    - name: Clone GNS3 GUI repository
      git:
        repo: "https://github.com/GNS3/gns3-gui.git"
        dest: "{{ gns3_src_dir }}/gns3-gui"
      register: gns3_gui_clone

    - name: Clone VPCS repository
      git:
        repo: "https://github.com/GNS3/vpcs.git"
        dest: "{{ gns3_src_dir }}/vpcs"
      register: vpcs_clone

    - name: Clone Dynamips repository
      git:
        repo: "https://github.com/GNS3/dynamips.git"
        dest: "{{ gns3_src_dir }}/dynamips"
      register: dynamips_clone

    - name: Clone uBridge repository
      git:
        repo: "https://github.com/GNS3/ubridge.git"
        dest: "{{ gns3_src_dir }}/ubridge"
      register: ubridge_clone

    - name: Check pip version
      command: pip3 --version
      register: pip_version
      changed_when: false

    - name: Upgrade pip
      pip:
        name: pip
        state: latest

    - name: Check if GNS3 server is installed
      command: pip3 show gns3-server
      register: gns3_server_installed
      changed_when: false
      failed_when: false

    - name: Install GNS3 server requirements
      pip:
        requirements: "{{ gns3_src_dir }}/gns3-server/requirements.txt"
      when: gns3_server_installed.rc != 0 or gns3_server_clone.changed

    - name: Install GNS3 server
      command: python3 setup.py install
      args:
        chdir: "{{ gns3_src_dir }}/gns3-server"
      when: gns3_server_installed.rc != 0 or gns3_server_clone.changed

    - name: Check if GNS3 GUI is installed
      command: pip3 show gns3-gui
      register: gns3_gui_installed
      changed_when: false
      failed_when: false
      become: no

    - name: Install GNS3 GUI requirements
      pip:
        requirements: "{{ gns3_src_dir }}/gns3-gui/requirements.txt"
      become: no
      when: gns3_gui_installed.rc != 0 or gns3_gui_clone.changed

    - name: Install GNS3 GUI
      command: python3 setup.py install
      args:
        chdir: "{{ gns3_src_dir }}/gns3-gui"
      become: no
      when: gns3_gui_installed.rc != 0 or gns3_gui_clone.changed

    - name: Check if desktop entry exists
      stat:
        path: /usr/share/applications/gns3.desktop
      register: desktop_entry

    - name: Configure desktop entry
      copy:
        src: "{{ gns3_src_dir }}/gns3-gui/resources/linux/applications/gns3.desktop"
        dest: /usr/share/applications/
        remote_src: yes
      when: not desktop_entry.stat.exists or gns3_gui_clone.changed

    - name: Check if icons exist
      stat:
        path: /usr/share/icons/hicolor/48x48/apps/gns3.png
      register: icons_exist

    - name: Copy GNS3 icons
      copy:
        src: "{{ gns3_src_dir }}/gns3-gui/resources/linux/icons/hicolor/"
        dest: /usr/share/icons/hicolor/
        remote_src: yes
      when: not icons_exist.stat.exists or gns3_gui_clone.changed

    - name: Check if VPCS is installed
      stat:
        path: /usr/local/bin/vpcs
      register: vpcs_binary

    - name: Build VPCS
      command: ./mk.sh
      args:
        chdir: "{{ gns3_src_dir }}/vpcs/src"
        creates: "{{ gns3_src_dir }}/vpcs/src/vpcs"
      when: not vpcs_binary.stat.exists or vpcs_clone.changed

    - name: Install VPCS
      copy:
        src: "{{ gns3_src_dir }}/vpcs/src/vpcs"
        dest: /usr/local/bin/vpcs
        mode: '0755'
        remote_src: yes
      when: not vpcs_binary.stat.exists or vpcs_clone.changed

    - name: Check if Dynamips is installed
      stat:
        path: /usr/local/bin/dynamips
      register: dynamips_binary

    - name: Create Dynamips build directory
      file:
        path: "{{ gns3_src_dir }}/dynamips/build"
        state: directory
        mode: '0755'
      when: not dynamips_binary.stat.exists or dynamips_clone.changed

    - name: Configure Dynamips
      command: cmake ..
      args:
        chdir: "{{ gns3_src_dir }}/dynamips/build"
      when: not dynamips_binary.stat.exists or dynamips_clone.changed

    - name: Build Dynamips
      command: make
      args:
        chdir: "{{ gns3_src_dir }}/dynamips/build"
      when: not dynamips_binary.stat.exists or dynamips_clone.changed

    - name: Install Dynamips
      command: make install
      args:
        chdir: "{{ gns3_src_dir }}/dynamips/build"
      when: not dynamips_binary.stat.exists or dynamips_clone.changed

    - name: Check if uBridge is installed
      stat:
        path: /usr/local/bin/ubridge
      register: ubridge_binary

    - name: Build uBridge
      command: make
      args:
        chdir: "{{ gns3_src_dir }}/ubridge"
      when: not ubridge_binary.stat.exists or ubridge_clone.changed

    - name: Install uBridge
      command: make install
      args:
        chdir: "{{ gns3_src_dir }}/ubridge"
      when: not ubridge_binary.stat.exists or ubridge_clone.changed

    - name: Check if Docker repository exists
      stat:
        path: /etc/yum.repos.d/docker-ce.repo
      register: docker_repo

    - name: Add Docker repository
      command: dnf config-manager --add-repo=https://download.docker.com/linux/centos/docker-ce.repo
      when: not docker_repo.stat.exists

    - name: Install Docker
      dnf:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
        state: present

    - name: Enable and start Docker service
      systemd:
        name: docker
        state: started
        enabled: yes

    - name: Check if user is in Docker group
      shell: groups {{ current_user }} | grep -q docker
      register: docker_group_check
      changed_when: false
      failed_when: false

    - name: Add user to Docker group
      user:
        name: "{{ current_user }}"
        groups: docker
        append: yes
      when: docker_group_check.rc != 0

    - name: Install libvirt and KVM
      dnf:
        name:
          - libvirt
          - qemu-kvm
        state: present

    - name: Check if user is in libvirt group
      shell: groups {{ current_user }} | grep -q libvirt
      register: libvirt_group_check
      changed_when: false
      failed_when: false

    - name: Add user to libvirt group
      user:
        name: "{{ current_user }}"
        groups: libvirt
        append: yes
      when: libvirt_group_check.rc != 0

    - name: Check if user is in kvm group
      shell: groups {{ current_user }} | grep -q kvm
      register: kvm_group_check
      changed_when: false
      failed_when: false

    - name: Add user to kvm group
      user:
        name: "{{ current_user }}"
        groups: kvm
        append: yes
      when: kvm_group_check.rc != 0

    - name: Enable and start libvirtd service
      systemd:
        name: libvirtd
        state: started
        enabled: yes

    - name: Enable and start virtlogd service
      systemd:
        name: virtlogd
        state: started
        enabled: yes

    - name: Check if GNS3 registry is cloned
      stat:
        path: /usr/local/share/gns3/gns3-registry
      register: gns3_registry

    - name: Create parent directory for GNS3 registry
      file:
        path: /usr/local/share/gns3
        state: directory
        mode: '0755'
      when: not gns3_registry.stat.exists

    - name: Clone GNS3 registry repository
      git:
        repo: https://github.com/GNS3/gns3-registry.git
        dest: /usr/local/share/gns3/gns3-registry
      when: not gns3_registry.stat.exists

    - name: Set permissions for GNS3 registry
      file:
        path: /usr/local/share/gns3/gns3-registry
        mode: '0777'
        recurse: yes

    - name: Check IP forwarding in sysctl
      command: grep -q "^net.ipv4.ip_forward=1" /etc/sysctl.conf
      register: ip_forward_check
      changed_when: false
      failed_when: false

    - name: Enable IP forwarding in sysctl
      replace:
        path: /etc/sysctl.conf
        regexp: '#net.ipv4.ip_forward=1'
        replace: 'net.ipv4.ip_forward=1'
      when: ip_forward_check.rc != 0

    - name: Check bridge netfilter call in sysctl
      command: grep -q "^net.bridge.bridge-nf-call-iptables=1" /etc/sysctl.conf
      register: bridge_netfilter_check
      changed_when: false
      failed_when: false

    - name: Enable bridge netfilter call in sysctl
      replace:
        path: /etc/sysctl.conf
        regexp: '#net.bridge.bridge-nf-call-iptables=1'
        replace: 'net.bridge.bridge-nf-call-iptables=1'
      when: bridge_netfilter_check.rc != 0

    - name: Check if qemu-kvm symlink exists
      stat:
        path: /usr/bin/qemu-kvm
      register: qemu_kvm_symlink

    - name: Create symlink for qemu-kvm
      file:
        src: /usr/libexec/qemu-kvm
        dest: /usr/bin/qemu-kvm
        state: link
      when: not qemu_kvm_symlink.stat.exists

    - name: Check if GNS3 port is open in firewall
      command: firewall-cmd --list-ports | grep -q "3080/tcp"
      register: gns3_port_check
      changed_when: false
      failed_when: false

    - name: Open GNS3 port in firewall
      firewalld:
        port: 3080/tcp
        permanent: yes
        state: enabled
      when: gns3_port_check.rc != 0

    - name: Check if firewall needs reload
      shell: echo $(($(firewall-cmd --permanent --get-zones | wc -w) + $(firewall-cmd --get-zones | wc -w)))
      register: firewall_zones
      changed_when: false

    - name: Reload firewall
      command: firewall-cmd --reload
      when: gns3_port_check.rc != 0 or xrdp_port_check.rc != 0

    - name: Create gns3 systemd service
      copy:
        src: /usr/local/src/gns3/gns3-server/init/gns3.service.systemd
        dest: /etc/systemd/system/gns3.service
        mode: 0644

    - name: Enable and start gns3 service
      systemd:
        name: gns3
        state: started
        enabled: yes

#    - name: Check if reboot is required
#      shell: needs-restarting -r
#      register: reboot_required
#      changed_when: false
#      failed_when: false
#
#    - name: Reboot system if required
#      reboot:
